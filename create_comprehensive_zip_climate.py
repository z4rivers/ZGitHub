#!/usr/bin/env python3
"""
Create comprehensive ZIP-level climate data using NOAA weather stations.
Maps major US ZIP codes to nearest weather stations with HDD/CDD data.
"""

import json
import math
from typing import Dict, List, Tuple

def haversine_km(lat1, lon1, lat2, lon2):
    """Calculate distance between two points in km"""
    R = 6371.0
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

def find_nearest_station(zip_lat, zip_lon, stations):
    """Find nearest weather station with valid HDD/CDD data"""
    best_station = None
    best_distance = float('inf')
    
    for station in stations:
        if station.get('hdd') is None or station.get('cdd') is None:
            continue
            
        distance = haversine_km(zip_lat, zip_lon, station['latitude'], station['longitude'])
        if distance < best_distance and distance < 100:  # Max 100km radius
            best_distance = distance
            best_station = station
    
    return best_station, best_distance

def get_major_zip_codes():
    """Get major US ZIP codes with coordinates"""
    # Major metropolitan area ZIP codes
    major_zips = {
        # New York Metro
        '10001': (40.7589, -73.9851), '10002': (40.7154, -73.9857), '10003': (40.7310, -73.9896),
        '10004': (40.6892, -73.9877), '10005': (40.7056, -73.9919), '10006': (40.7095, -73.9979),
        '10007': (40.7131, -74.0098), '10009': (40.7264, -73.9777), '10010': (40.7391, -73.9826),
        '10011': (40.7404, -74.0024), '10012': (40.7256, -73.9974), '10013': (40.7197, -74.0051),
        '10014': (40.7342, -74.0063), '10016': (40.7460, -73.9753), '10017': (40.7520, -73.9717),
        '10018': (40.7549, -73.9933), '10019': (40.7656, -73.9852), '10021': (40.7698, -73.9565),
        '10022': (40.7589, -73.9707), '10023': (40.7756, -73.9827), '10024': (40.7879, -73.9738),
        '10025': (40.7957, -73.9667), '10026': (40.8018, -73.9527), '10027': (40.8075, -73.9533),
        '10028': (40.7766, -73.9534), '10029': (40.7919, -73.9441), '10030': (40.8186, -73.9424),
        
        # Los Angeles Metro
        '90001': (33.9731, -118.2479), '90002': (33.9499, -118.2479), '90003': (33.9644, -118.2722),
        '90004': (34.0759, -118.3089), '90005': (34.0599, -118.3089), '90006': (34.0481, -118.2919),
        '90007': (34.0298, -118.2851), '90008': (34.0107, -118.3342), '90010': (34.0622, -118.3006),
        '90011': (33.9969, -118.2587), '90012': (34.0570, -118.2368), '90013': (34.0394, -118.2581),
        '90014': (34.0444, -118.2581), '90015': (34.0394, -118.2662), '90016': (34.0347, -118.3342),
        '90017': (34.0522, -118.2581), '90018': (34.0194, -118.3089), '90019': (34.0347, -118.3342),
        '90020': (34.0672, -118.3089), '90021': (34.0333, -118.2368), '90024': (34.0628, -118.4417),
        '90025': (34.0431, -118.4417), '90026': (34.0778, -118.2615), '90027': (34.0972, -118.2851),
        '90028': (34.1019, -118.3267), '90029': (34.0889, -118.2851), '90031': (34.0719, -118.2118),
        
        # Chicago Metro
        '60601': (41.8827, -87.6233), '60602': (41.8827, -87.6431), '60603': (41.8733, -87.6431),
        '60604': (41.8733, -87.6278), '60605': (41.8686, -87.6233), '60606': (41.8827, -87.6431),
        '60607': (41.8733, -87.6431), '60608': (41.8522, -87.6431), '60609': (41.8097, -87.6431),
        '60610': (41.8969, -87.6278), '60611': (41.8969, -87.6233), '60612': (41.8733, -87.6728),
        '60613': (41.9494, -87.6550), '60614': (41.9294, -87.6431), '60615': (41.7953, -87.6003),
        '60616': (41.8522, -87.6233), '60617': (41.7261, -87.5564), '60618': (41.9439, -87.6728),
        '60619': (41.7500, -87.6003), '60620': (41.7408, -87.6431), '60621': (41.7908, -87.6431),
        '60622': (41.9036, -87.6728), '60623': (41.8522, -87.7073), '60624': (41.8953, -87.7073),
        
        # Houston Metro
        '77001': (29.7342, -95.3958), '77002': (29.7508, -95.3694), '77003': (29.7342, -95.3431),
        '77004': (29.7175, -95.3958), '77005': (29.7175, -95.4222), '77006': (29.7508, -95.3958),
        '77007': (29.7675, -95.3958), '77008': (29.7842, -95.4222), '77009': (29.7842, -95.3694),
        '77010': (29.7342, -95.3431), '77011': (29.7008, -95.3167), '77012': (29.7008, -95.3431),
        '77013': (29.7175, -95.2903), '77014': (29.8342, -95.3958), '77015': (29.7008, -95.2639),
        '77016': (29.8008, -95.4486), '77017': (29.6842, -95.2639), '77018': (29.8175, -95.4222),
        '77019': (29.7675, -95.4486), '77020': (29.7342, -95.3167), '77021': (29.6842, -95.3694),
        '77022': (29.8008, -95.3694), '77023': (29.7175, -95.3167), '77024': (29.7508, -95.4750),
        
        # Phoenix Metro
        '85001': (33.4500, -112.0667), '85002': (33.4167, -112.0667), '85003': (33.4333, -112.1000),
        '85004': (33.4500, -112.0333), '85006': (33.4000, -112.0333), '85007': (33.3833, -112.0667),
        '85008': (33.3833, -112.0333), '85009': (33.4167, -112.1333), '85012': (33.5167, -112.0333),
        '85013': (33.4833, -112.1000), '85014': (33.5000, -112.0667), '85015': (33.4667, -112.0333),
        '85016': (33.5000, -112.0333), '85017': (33.4833, -112.1333), '85018': (33.4333, -112.0333),
        '85019': (33.4833, -112.1667), '85020': (33.4000, -112.0000), '85021': (33.5167, -112.1333),
        '85022': (33.5500, -112.1000), '85023': (33.4667, -112.1333), '85024': (33.3667, -112.0333),
        
        # Philadelphia Metro
        '19101': (39.9526, -75.1652), '19102': (39.9526, -75.1719), '19103': (39.9559, -75.1719),
        '19104': (39.9559, -75.2013), '19106': (39.9559, -75.1455), '19107': (39.9493, -75.1586),
        '19108': (39.9559, -75.1652), '19109': (39.9526, -75.1719), '19110': (39.9959, -75.1455),
        '19111': (40.0526, -75.0788), '19112': (40.0359, -75.0788), '19113': (39.8793, -75.2680),
        '19114': (40.0693, -75.0788), '19115': (40.0693, -75.0455), '19116': (40.1026, -75.0455),
        '19118': (40.0526, -75.2013), '19119': (40.0359, -75.1880), '19120': (40.0193, -75.1147),
        '19121': (39.9859, -75.1719), '19122': (39.9793, -75.1455), '19123': (39.9693, -75.1586),
        '19124': (40.0026, -75.1147), '19125': (39.9726, -75.1322), '19126': (40.0359, -75.1719),
        
        # San Antonio Metro
        '78201': (29.4508, -98.5000), '78202': (29.4175, -98.4667), '78203': (29.3842, -98.4667),
        '78204': (29.3842, -98.5000), '78205': (29.4175, -98.5000), '78207': (29.4508, -98.5333),
        '78208': (29.4842, -98.5000), '78209': (29.4842, -98.4667), '78210': (29.3508, -98.4667),
        '78211': (29.3508, -98.5000), '78212': (29.4842, -98.4333), '78213': (29.5175, -98.4667),
        '78214': (29.3175, -98.4667), '78215': (29.4175, -98.4333), '78216': (29.5175, -98.4333),
        '78217': (29.5508, -98.4667), '78218': (29.4508, -98.4333), '78219': (29.4175, -98.4000),
        '78220': (29.3842, -98.4333), '78221': (29.3508, -98.4333), '78222': (29.3842, -98.4000),
        
        # San Diego Metro
        '92101': (32.7175, -117.1628), '92102': (32.7008, -117.1361), '92103': (32.7342, -117.1628),
        '92104': (32.7508, -117.1361), '92105': (32.7008, -117.1094), '92106': (32.7175, -117.1894),
        '92107': (32.7508, -117.2161), '92108': (32.7675, -117.1628), '92109': (32.7842, -117.2161),
        '92110': (32.7675, -117.1894), '92111': (32.8008, -117.1361), '92113': (32.6675, -117.1094),
        '92114': (32.7008, -117.0828), '92115': (32.7342, -117.0561), '92116': (32.7508, -117.1094),
        '92117': (32.8175, -117.1628), '92118': (32.6342, -117.0828), '92119': (32.7675, -117.0828),
        '92120': (32.7842, -117.1094), '92121': (32.8842, -117.2161), '92122': (32.8675, -117.2161),
        
        # Dallas Metro
        '75201': (32.7767, -96.7970), '75202': (32.7767, -96.8103), '75203': (32.7433, -96.8103),
        '75204': (32.7767, -96.7837), '75205': (32.8100, -96.7837), '75206': (32.7767, -96.7703),
        '75207': (32.7767, -96.8236), '75208': (32.7433, -96.8236), '75209': (32.8100, -96.8103),
        '75210': (32.7100, -96.8103), '75211': (32.7100, -96.8236), '75212': (32.7767, -96.8369),
        '75214': (32.8100, -96.7570), '75215': (32.7433, -96.7837), '75216': (32.7100, -96.7837),
        '75217': (32.7100, -96.7570), '75218': (32.8100, -96.7437), '75219': (32.8100, -96.8103),
        '75220': (32.8433, -96.8236), '75223': (32.7767, -96.7437), '75224': (32.7433, -96.7570),
        
        # San Jose Metro
        '95110': (37.3394, -121.8853), '95111': (37.3061, -121.8586), '95112': (37.3527, -121.8586),
        '95113': (37.3394, -121.8719), '95116': (37.3727, -121.8586), '95117': (37.3727, -121.9253),
        '95118': (37.3061, -121.8719), '95119': (37.2727, -121.8586), '95120': (37.2394, -121.8586),
        '95121': (37.3394, -121.8319), '95122': (37.3061, -121.8319), '95123': (37.2727, -121.8719),
        '95124': (37.2394, -121.8719), '95125': (37.3061, -121.8986), '95126': (37.3394, -121.9119),
        '95127': (37.3727, -121.8319), '95128': (37.3727, -121.8986), '95129': (37.4061, -121.9386),
        '95130': (37.4061, -121.9119), '95131': (37.4394, -121.8986), '95132': (37.4061, -121.8719),
        
        # Austin Metro
        '78701': (30.2672, -97.7431), '78702': (30.2539, -97.7297), '78703': (30.2672, -97.7564),
        '78704': (30.2339, -97.7564), '78705': (30.2939, -97.7431), '78712': (30.2839, -97.7331),
        '78717': (30.3939, -97.8564), '78719': (30.1672, -97.7297), '78721': (30.2672, -97.6997),
        '78722': (30.2672, -97.7164), '78723': (30.2939, -97.6831), '78724': (30.2339, -97.6831),
        '78725': (30.2006, -97.6831), '78726': (30.4006, -97.8164), '78727': (30.3672, -97.7697),
        '78728': (30.3339, -97.8297), '78729': (30.3672, -97.8164), '78730': (30.3339, -97.8831),
        '78731': (30.3339, -97.7697), '78732': (30.3006, -97.8831), '78733': (30.3672, -97.8831),
        
        # Jacksonville Metro
        '32202': (30.3322, -81.6557), '32204': (30.3322, -81.6924), '32205': (30.3655, -81.6924),
        '32206': (30.3322, -81.6190), '32207': (30.2989, -81.6557), '32208': (30.3655, -81.7291),
        '32209': (30.3989, -81.6924), '32210': (30.2322, -81.6190), '32211': (30.4322, -81.6557),
        '32216': (30.2989, -81.5823), '32217': (30.2322, -81.5823), '32218': (30.4655, -81.6924),
        '32219': (30.1989, -81.6557), '32220': (30.4655, -81.7658), '32221': (30.4322, -81.7291),
        '32222': (30.4655, -81.7291), '32223': (30.1655, -81.5823), '32224': (30.2322, -81.5456),
        '32225': (30.3989, -81.5456), '32226': (30.4322, -81.5823), '32244': (30.5322, -81.6924),
        
        # Columbus Metro
        '43201': (39.9831, -82.9988), '43202': (39.9498, -82.9988), '43203': (39.9164, -82.9988),
        '43204': (39.9164, -83.0321), '43205': (39.9498, -83.0321), '43206': (39.9164, -82.9654),
        '43207': (39.8831, -82.9988), '43209': (39.9164, -82.9321), '43210': (39.9998, -83.0154),
        '43211': (39.9998, -82.9654), '43212': (40.0331, -83.0154), '43213': (39.9164, -82.8988),
        '43214': (40.0331, -82.9654), '43215': (39.9664, -83.0154), '43219': (39.9831, -82.8988),
        '43220': (40.0331, -83.0488), '43221': (40.0664, -83.0821), '43222': (39.9498, -83.0821),
        '43223': (39.9164, -83.0654), '43224': (40.0331, -82.9321), '43229': (40.0998, -82.9654),
        
        # Fort Worth Metro
        '76102': (32.7489, -97.3428), '76103': (32.7822, -97.3428), '76104': (32.7489, -97.3094),
        '76105': (32.7156, -97.3094), '76106': (32.7489, -97.3761), '76107': (32.7822, -97.3761),
        '76108': (32.8156, -97.3761), '76109': (32.7822, -97.4094), '76110': (32.7156, -97.3428),
        '76111': (32.8156, -97.3428), '76112': (32.7822, -97.2761), '76114': (32.6822, -97.3761),
        '76115': (32.6489, -97.3761), '76116': (32.7156, -97.4094), '76117': (32.8156, -97.4094),
        '76118': (32.7822, -97.4428), '76119': (32.6822, -97.3428), '76120': (32.6489, -97.3428),
        '76123': (32.6822, -97.4094), '76131': (32.8156, -97.4428), '76132': (32.7489, -97.4428),
        
        # Charlotte Metro
        '28202': (35.2264, -80.8414), '28203': (35.1931, -80.8414), '28204': (35.1931, -80.8747),
        '28205': (35.2264, -80.8081), '28206': (35.2597, -80.8081), '28207': (35.1931, -80.7747),
        '28208': (35.2264, -80.8747), '28209': (35.1598, -80.8414), '28210': (35.1264, -80.8081),
        '28211': (35.1598, -80.7747), '28212': (35.2597, -80.7414), '28213': (35.2930, -80.7747),
        '28214': (35.2264, -80.9081), '28215': (35.2930, -80.7081), '28216': (35.2930, -80.8747),
        '28217': (35.0931, -80.8414), '28226': (35.1264, -80.7414), '28227': (35.1931, -80.7081),
        '28269': (35.3597, -80.7747), '28270': (35.0598, -80.7747), '28273': (35.0264, -80.8414),
        
        # Seattle Metro
        '98101': (47.6097, -122.3331), '98102': (47.6297, -122.3198), '98103': (47.6764, -122.3431),
        '98104': (47.6031, -122.3331), '98105': (47.6631, -122.3031), '98106': (47.5231, -122.3531),
        '98107': (47.6697, -122.3764), '98108': (47.4964, -122.3198), '98109': (47.6231, -122.3464),
        '98112': (47.6297, -122.2931), '98115': (47.6897, -122.3031), '98116': (47.5697, -122.3864),
        '98117': (47.6897, -122.3764), '98118': (47.5431, -122.2731), '98119': (47.6364, -122.3598),
        '98121': (47.6164, -122.3431), '98122': (47.6031, -122.3031), '98125': (47.7231, -122.3298),
        '98126': (47.5364, -122.3698), '98133': (47.7364, -122.3431), '98134': (47.5697, -122.3198),
        
        # Denver Metro
        '80202': (39.7519, -104.9914), '80203': (39.7352, -104.9581), '80204': (39.7519, -105.0247),
        '80205': (39.7686, -104.9581), '80206': (39.7352, -104.9247), '80207': (39.7686, -104.9247),
        '80209': (39.7019, -104.9581), '80210': (39.6686, -104.9581), '80211': (39.7852, -105.0247),
        '80212': (39.7852, -105.0581), '80214': (39.7352, -105.0581), '80218': (39.7352, -104.8914),
        '80219': (39.7019, -104.9247), '80220': (39.7352, -104.8581), '80221': (39.8352, -104.9581),
        '80222': (39.6686, -104.9247), '80223': (39.6686, -104.9914), '80224': (39.6352, -104.9581),
        '80226': (39.6352, -105.0247), '80227': (39.6019, -105.0247), '80230': (39.7019, -104.8914),
        
        # Boston Metro
        '02101': (42.3584, -71.0598), '02102': (42.3484, -71.0531), '02103': (42.3551, -71.0531),
        '02104': (42.3617, -71.0598), '02105': (42.3617, -71.0664), '02106': (42.3484, -71.0664),
        '02107': (42.3684, -71.0598), '02108': (42.3617, -71.0664), '02109': (42.3684, -71.0531),
        '02110': (42.3551, -71.0464), '02111': (42.3484, -71.0598), '02113': (42.3684, -71.0464),
        '02114': (42.3617, -71.0731), '02115': (42.3417, -71.0864), '02116': (42.3484, -71.0731),
        '02118': (42.3384, -71.0731), '02119': (42.3284, -71.0864), '02120': (42.3317, -71.0998),
        '02121': (42.3184, -71.0864), '02122': (42.3051, -71.0598), '02124': (42.2984, -71.0731),
        
        # Washington DC Metro
        '20001': (38.9072, -77.0369), '20002': (38.8972, -77.0036), '20003': (38.8839, -77.0036),
        '20004': (38.8972, -77.0369), '20005': (38.9072, -77.0436), '20006': (38.8972, -77.0436),
        '20007': (38.9072, -77.0703), '20008': (38.9339, -77.0703), '20009': (38.9239, -77.0369),
        '20010': (38.9339, -77.0369), '20011': (38.9539, -77.0369), '20012': (38.9539, -77.0036),
        '20015': (38.9672, -77.0703), '20016': (38.9339, -77.1036), '20017': (38.9339, -77.0036),
        '20018': (38.9072, -76.9703), '20019': (38.8572, -76.9703), '20020': (38.8372, -76.9703),
    }
    return major_zips

def main():
    print("Creating comprehensive ZIP-level climate data...")
    
    # Load NOAA weather station data
    print("Loading NOAA weather station database...")
    with open('temp_commit/noaa_climate_database.json', 'r') as f:
        noaa_stations = json.load(f)
    
    print(f"Loaded {len(noaa_stations)} NOAA weather stations")
    
    # Get major ZIP codes
    major_zips = get_major_zip_codes()
    print(f"Processing {len(major_zips)} major US ZIP codes...")
    
    # Create comprehensive climate data
    climate_data = {}
    stations_used = set()
    
    for zip_code, (lat, lon) in major_zips.items():
        nearest_station, distance = find_nearest_station(lat, lon, noaa_stations)
        
        if nearest_station and distance < 100:  # Within 100km
            climate_data[zip_code] = {
                "hdd": round(nearest_station['hdd'], 1),
                "cdd": round(nearest_station['cdd'], 1),
                "station_name": nearest_station['name'],
                "station_id": nearest_station['station_id'],
                "distance_km": round(distance, 1)
            }
            stations_used.add(nearest_station['station_id'])
            print(f"ZIP {zip_code}: HDD={nearest_station['hdd']}, CDD={nearest_station['cdd']}, Station={nearest_station['station_id']} ({distance:.1f}km)")
        else:
            print(f"ZIP {zip_code}: No suitable weather station found within 100km")
    
    # Create output structure
    output_data = {
        "metadata": {
            "description": "Comprehensive ZIP-level climate data for major US metropolitan areas",
            "source": "NOAA Climate Normals 2006-2020",
            "zip_codes_covered": len(climate_data),
            "weather_stations_used": len(stations_used),
            "max_distance_km": 100,
            "created": "2024-12-19"
        },
        "climate_data": climate_data
    }
    
    # Write comprehensive climate data
    output_file = 'extracted_climate_data_comprehensive.json'
    with open(output_file, 'w') as f:
        json.dump(output_data, f, indent=2)
    
    print(f"\n✅ Created comprehensive climate data:")
    print(f"   - File: {output_file}")
    print(f"   - ZIP codes: {len(climate_data)}")
    print(f"   - Weather stations: {len(stations_used)}")
    print(f"   - File size: {len(json.dumps(output_data)) / 1024:.1f} KB")

if __name__ == '__main__':
    main()
